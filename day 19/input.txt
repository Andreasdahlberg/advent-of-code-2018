#ip 3

# PART 2: R0 starts with value 1, all other registers are set to 0

addi 3 16 3 # [0]   r3 + 16 => r3       Jump to 16(17)
seti 1 5 1  # [1]   1 => r1             Store 1 to r1
seti 1 4 4  # [2]   1 => r4             Store 1 to r4, Start of outer loop
mulr 1 4 5  # [3]   r1 * r4 => r5       Start of inner loop
eqrr 5 2 5  # [4]   r5 == r2 => r5
addr 5 3 3  # [5]   r5 + r3 => r3       if r5 was equal to r2, skip the next instruction
addi 3 1 3  # [6]   r3 + 1 => r3        skip the next instruction
addr 1 0 0  # [7]   r1 + r0 => r0
addi 4 1 4  # [8]   r4 + 1 => r4        increment r4 by one
gtrr 4 2 5  # [9]   r4 > r2 => r5
addr 3 5 3  # [10]  r3 + r5 => r3       if r4 was greater than r2, skip the next instruction
seti 2 6 3  # [11]  2 => r3             Jump to 2(3)
addi 1 1 1  # [12]  r1 + 1 => r1        Add one to r1
gtrr 1 2 5  # [13]  r1 > r2 => r5
addr 5 3 3  # [14]  r5 + r3 => r3       if r1 was greater than r2, skip the next instruction
seti 1 1 3  # [15]  1 => r3             Jump to 1(2)
mulr 3 3 3  # [16]  r3 * r3 => r3
addi 2 2 2  # [17]  r2 + 2 => r2
mulr 2 2 2  # [18]  r2 * r2 => r2
mulr 3 2 2  # [19]  r3 * r2 => r2
muli 2 11 2 # [20]  r2 * 11 => r2
addi 5 3 5  # [21]  r5 + 3 => r5
mulr 5 3 5  # [22]  r5 * r3 => r5
addi 5 3 5  # [23]  r5 + 3 => r5
addr 2 5 2  # [24]  r2 + r5 => r2
addr 3 0 3  # [25]  r3 + r0 => r3       Skip the next instruction(s) if r0 > 0
seti 0 6 3  # [26]  0 => r3             Jump to 0(1)
setr 3 8 5  # [27]  r3 => r5
mulr 5 3 5  # [28]  r5 * r3 => r5
addr 3 5 5  # [29]  r3 + r5 => r5
mulr 3 5 5  # [30]  r3 * r5 => r5
muli 5 14 5 # [31]  r5 * 14 => r5
mulr 5 3 5  # [32] r5 * r3 => r5
addr 2 5 2  # [33] r2 + r5 => r2
seti 0 2 0  # [34] 0 => r0
seti 0 2 3  # [35] 0 => r3              Jump to 0(1)
